#pragma once

namespace walang::binaryen {

enum Id {
  InvalidId = 0,
  BlockId,
  IfId,
  LoopId,
  BreakId,
  SwitchId,
  CallId,
  CallIndirectId,
  LocalGetId,
  LocalSetId,
  GlobalGetId,
  GlobalSetId,
  LoadId,
  StoreId,
  ConstId,
  UnaryId,
  BinaryId,
  SelectId,
  DropId,
  ReturnId,
  MemorySizeId,
  MemoryGrowId,
  NopId,
  UnreachableId,
  AtomicRMWId,
  AtomicCmpxchgId,
  AtomicWaitId,
  AtomicNotifyId,
  AtomicFenceId,
  SIMDExtractId,
  SIMDReplaceId,
  SIMDShuffleId,
  SIMDTernaryId,
  SIMDShiftId,
  SIMDLoadId,
  SIMDLoadStoreLaneId,
  MemoryInitId,
  DataDropId,
  MemoryCopyId,
  MemoryFillId,
  PopId,
  RefNullId,
  RefIsId,
  RefFuncId,
  RefEqId,
  TableGetId,
  TableSetId,
  TableSizeId,
  TableGrowId,
  TryId,
  ThrowId,
  RethrowId,
  TupleMakeId,
  TupleExtractId,
  I31NewId,
  I31GetId,
  CallRefId,
  RefTestId,
  RefCastId,
  BrOnId,
  StructNewId,
  StructGetId,
  StructSetId,
  ArrayNewId,
  ArrayNewSegId,
  ArrayInitId,
  ArrayGetId,
  ArraySetId,
  ArrayLenId,
  ArrayCopyId,
  RefAsId,
  StringNewId,
  StringConstId,
  StringMeasureId,
  StringEncodeId,
  StringConcatId,
  StringEqId,
  StringAsId,
  StringWTF8AdvanceId,
  StringWTF16GetId,
  StringIterNextId,
  StringIterMoveId,
  StringSliceWTFId,
  StringSliceIterId,
  NumExpressionIds
};

}